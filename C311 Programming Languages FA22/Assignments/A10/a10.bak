#lang racket
(require "mk.rkt")
(require "numbers.rkt")

; Part 1
(println "Part I")
; 1
(run 2 (q)
  (== 5 q)
  (conde
   [(conde 
     [(== 5 q)
      (== 6 q)])
    (== 5 q)]
   [(== q 5)]))

; 2
(run 1 (q) 
  (fresh (a b) 
         (== `(,a ,b) q)
         (absento 'tag q)
         (symbolo a)))

; 3
; I
; II
; III
; IV
; V

; Part 2
(define assoc
  (lambda (x ls)
    (match-let* ((`(,a . ,d) ls)
                 (`(,aa . ,da) a))
      (cond
        ((equal? aa x) a)
        ((not (equal? aa x)) (assoc x d))))))

(define reverse
  (lambda (ls)
    (cond
      ((equal? '() ls) '())
      (else
       (match-let* ((`(,a . ,d) ls)
                    (res (reverse d)))
         (append res `(,a)))))))

(define stutter
  (lambda (ls)
    (cond
      ((equal? '() ls) '())
      (else 
        (match-let* ((`(,a . ,d) ls)
		     (res (stutter d)))
          `(,a ,a . ,res))))))

(defrel (assoco x ls o)
  (fresh (a d aa da)
         (== `(,a . ,d) ls)
         (== `(,aa . ,da) a)
         (conde
          [(== aa x)
           (== a o)]
          [(=/= aa x)
           (assoco x d o)])))

(defrel (reverseo ls o)
  (conde
   [(== '() ls)
    (== '() o)]
   [(fresh (a d res)
           (== `(,a . ,d) ls)
           (reverseo d res)
           (appendo res `(,a) o))]))

(defrel (stuttero ls o)
  (conde
   [(== '() ls)
    (== '() o)]
   [(fresh (a d res)
           (== `(,a . ,d) ls)
           (== `(,a ,a . ,res) o)
           (stuttero d res))]))

; assoco
(println "assoco tests")
(run* q (assoco 'x '() q)) ; ()
(run* q (assoco 'x '((x . 5)) q)) ;((x . 5))
(run* q (assoco 'x '((y . 6) (x . 5)) q)) ;((x . 5))
(run* q (assoco 'x '((x . 6) (x . 5)) q)) ;((x . 6))
(run* q (assoco 'x '((x . 5)) '(x . 5))) ;(_0)
(run* q (assoco 'x '((x . 6) (x . 5)) '(x . 6))) ;(_0)
(run* q (assoco 'x '((x . 6) (x . 5)) '(x . 5))) ;()
(run* q (assoco q '((x . 6) (x . 5)) '(x . 5))) ;()
(run* q (assoco 'x '((x . 6) . ,q) '(x . 6))) ;(_0)
(run 5 q (assoco 'x q '(x . 5)))
(run 5 q (fresh (x y z)
                (assoco x y z)
                (== `(,x ,y ,z) q)))

; reverseo
(println "reverseo tests")
(run* q (reverseo '() q))
(run* q (reverseo '(a) q))
(run* q (reverseo '(a b c d) q))
(run* q (fresh (x) (reverseo `(a b ,x c d) q)))
(run* x (reverseo `(a b ,x d) '(d c b a)))
(run* x (reverseo `(a b c d) `(d . ,x)))
(run* q (fresh (x) (reverseo `(a b c d) `(d . (,q . ,x)))))
(run 10 q (fresh (x y) (reverseo x y) (== `(,x ,y) q)))

; stuttero
(println "stuttero tests")
(run 1 q (stuttero q '(1 1 2 2 3 3)))
(run* q (stuttero q '(1 1 2 2 3 3)))
(run 1 q (fresh (a b c d) (== q `(,a ,b ,c ,d)) (stuttero a `(1 ,b ,c 2 3 ,d))))
(run 1 q (fresh (a b c d) (== q `(,a ,b ,c ,d)) (stuttero `(,b 1) `(,c . ,d))))
(run 1 q (fresh (e f g) (== q `(,e ,f ,g)) (stuttero `(,e . ,f) g)))
(run 2 q (fresh (e f g) (== q `(,e ,f ,g)) (stuttero `(,e . ,f) g)))
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
print(petall)
print(petalw)
print(maxes)
print("")
#c_head[petall,petalw,] =
}
}
print(c_head)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
prior = rep(1/3,3);
errors = 0
c_head = array(0,dim=c(values,values,1), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Prediction")))
print(c_head)
for (petall in 1:values) {
for (petalw in 1:values) {
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
print(petall)
print(petalw)
print(maxes)
if (len(maxes) > 1)
print(bitch)
print("")
#c_head[petall,petalw,] =
}
}
print(c_head)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
prior = rep(1/3,3);
errors = 0
c_head = array(0,dim=c(values,values,1), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Prediction")))
print(c_head)
for (petall in 1:values) {
for (petalw in 1:values) {
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
print(petall)
print(petalw)
print(maxes)
if (length(maxes) > 1)
print(bitch)
print("")
#c_head[petall,petalw,] =
}
}
print(c_head)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
prior = rep(1/3,3);
errors = 0
c_head = array(0,dim=c(values,values,1), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Prediction")))
print(c_head)
for (petall in 1:values) {
for (petalw in 1:values) {
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
print(petall)
print(petalw)
print(maxes)
if (length(maxes) > 1)
print("bitch")
print("")
#c_head[petall,petalw,] =
}
}
print(c_head)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
prior = rep(1/3,3);
errors = 0
c_head = array(0,dim=c(values,values,1), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Prediction")))
print(c_head)
for (petall in 1:values) {
for (petalw in 1:values) {
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
print(petall)
print(petalw)
print(maxes)
if (length(maxes) == 1)
c_head[petall,petalw,] = maxes
}
}
print(c_head)
# create a bayes classifier for the iris data using a single feature: the petal length
# since the feature is continuous and we only know how to do discrete probability, we will quantize
# the feature into 4 different levels
# we estimate our class-conditional probability distributions by counting, for each class
# the number of examples we have at each level.  We write Q[c,v] = P(x = v | C = c)
# our prior is just "uniform"  (1/3,1/3,1/3) since 50 examples of each class
# we maximize p(C = c)P(x | C = c) over the class c to find our classification
# (this is what the Bayes classifier does)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
print(iris)
petal_len = 3
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
iris3[,petal_len,] = cut(iris3[,petal_len,],breaks=bk,labels=1:values)   # substitute the  quantized values
x = iris3[,petal_len,];    # just to simplify going forward ...  x[i,c] is the quantized value
# of ith flower from cth class
Q = array(0,dim=c(3,values));	# Q[c,v] is P(x = v | class c)
for (c in 1:3) {
for (v in 1:values) {
Q[c,v] = sum(x[,c] == v)/50   # estimate probs by usual counting
}
}
print(Q)
prior = rep(1/3,3);  # prior not very important in this example since data chosen to have 50 examples from each class
error = 0;     # will count the # of errors our Bayes classifier makes
c_head = array(0,dim=c(1,values));
for (v in 1:values) {
c_head[,v] = which.max(Q[,v]*prior)
cat("attribute value: ",v,"c_head: ",c_head[,v],"\n");
}
print(c_head)
# do the classification of the flowers
for (c in 1:3) {   # for each class
for (i in 1:50) {    # for each flower ...
v = x[i,c];
cat("true class: ",c,"nb says: ",c_head[,v],"\n");
if (c != c_head[,v]) error = error+1;
}
}
cat("errors = ", error, "\n");
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
print(q)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
prior = rep(1/3,3);
errors = 0
c_head = array(0,dim=c(values,values,1), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Prediction")))
print(c_head)
for (petall in 1:values) {
for (petalw in 1:values) {
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
print(petall)
print(petalw)
print(maxes)
if (length(maxes) == 1)
c_head[petall,petalw,] = maxes
}
}
print(c_head)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
prior = rep(1/3,3);
errors = 0
c_head = array(0,dim=c(values,values,1), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Prediction")))
print(c_head)
for (petall in 1:values) {
for (petalw in 1:values) {
#eliminates ties and the value of c_head remains 0 at the tie spot
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
if (length(maxes) == 1)
c_head[petall,petalw,] = maxes
}
}
print(c_head)
data(iris3)   # (different form of same data) 3 dim array,  iris3[50 examples, 4 attributes, 3 classes]
#print(iris)
bk = c(0,.5,1.,1.5,2.,8)  # the breakpoints we will used in quantizing the petal_len variable
values = length(bk)-1;
species = 3
sepall = 1
sepalw = 2
petall = 3
petalw = 4
iris3[,c(petall,petalw),] = cut(iris3[,c(petall,petalw),],breaks=bk,labels=1:values)
x = iris3[,c(petall,petalw),]
#print(x)
q = array(0.0,dim=c(values,values,species), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Setosa", "Veriscolor", "Virginica")))
len = length(x[,1,1])
for (spec in 1:species) {
for (petall in 1:values) {
for (petalw in 1:values) {
q[petall,petalw,spec] = sum(x[,1,spec] == petall & x[,2,spec] == petalw)/50
}
}
}
prior = rep(1/3,3);
errors = 0
c_head = array(0,dim=c(values,values,1), dimnames = list(c(1,2,3,4,5), c(1,2,3,4,5), c("Prediction")))
for (petall in 1:values) {
for (petalw in 1:values) {
#eliminates ties and the value of c_head remains 0 at the tie spot
vec = prior * q[petall,petalw,]
maxes = which(vec == max(vec))
if (length(maxes) == 1)
c_head[petall,petalw,] = maxes
}
}
print(c_head)
X = list(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 1000000
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
if (x[1] > x[2])
count = count + 1
}
print(count/num)
X = list(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 1000000
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
if (ex[1] > ex[2])
count = count + 1
}
print(count/num)
X = list(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 1000000
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
print(x[1])
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
X = C(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 100
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
print(x[1])
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
X = C(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 100
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
print(ex[1])
print(ex[2])
print("")
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
X = C(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 100
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
print(ex)
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
X = C(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 100
count = 0
for (i in 1:num) {
ex = sample(X, 3, replace=FALSE)
print(ex)
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
X = C(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 100
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
print(ex)
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
X = C(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 100
count = 0
for (i in 1:num) {
ex = sample(X, 2, replace=FALSE)
print(ex)
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
list = list(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 100
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
print(ex)
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
list = list(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 10
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
print(ex)
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
list = c(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 10
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
print(ex)
#if (ex[1] > ex[2])
# count = count + 1
}
print(count/num)
list = c(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 10
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
print(ex)
if (ex[1] > ex[2])
count = count + 1
}
print(count/num)
list = c(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 10
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
print(ex)
if (ex[1] > ex[2])
count = count + 1
}
print(count/num)
list = c(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 1000
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
print(ex)
if (ex[1] > ex[2])
count = count + 1
}
print(count/num)
list = c(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 1000000
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
print(ex)
if (ex[1] > ex[2])
count = count + 1
}
print(count/num)
list = c(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 1000000
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
#print(ex)
if (ex[1] > ex[2])
count = count + 1
}
print(count/num)
list = c(1.2, 1.5, 3.2, 3.3, 3.4, 5.3, 6.3, 7.2, 8.9, 9.1)
num = 10000000
count = 0
for (i in 1:num) {
ex = sample(list, 2, replace=FALSE)
#print(ex)
if (ex[1] > ex[2])
count = count + 1
}
print(count/num)

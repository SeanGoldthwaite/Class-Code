# -*- coding: utf-8 -*-
"""Hierarchical Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KdnE0yN7dtKs4lO4vYVABfWeT5u7kPoZ
"""

import numpy as np
import math

def load_convert_data(filepath):
  with open(filepath) as f:
    lines = f.read().splitlines()

    n_clusters = int(lines[0])
    data = lines[1:]

    for index, item in enumerate(data):
      data[index] = [float(num) for num in item.split()]

    data = np.matrix(data)
    for index, item in enumerate(data):
      data[index, index] = math.inf

    return data, n_clusters


distance_matrix, n_clusters = load_convert_data('rosalind_ba8e.txt')
print(distance_matrix, distance_matrix.shape, n_clusters)
n_data = distance_matrix.shape[0]
t = [[num] for num in range(1, n_data+1)]
history = ''
counter = n_clusters

print('\n\nStarting Algorithm:\n\n')

while counter > 1:
  print(counter)
  n_data = distance_matrix.shape[0]
  c_i, c_j = np.unravel_index(np.argmin(distance_matrix, axis=None), distance_matrix.shape)
  print(c_i, c_j)
  t[c_i].extend(t[c_j])
  t[c_j] = []
  print(t)
  history += f'{t[c_i]}\n'
  # history += f'{c_i+1}, {c_j+1}'
  # if t[c_j]:
  #   history += f'{t[c_j]}'
  # # if t[c_i]:
  # #   history += f'{t[c_i]}'
  # history += '\n'

  for i in range(n_data):
    if i != c_i and i != c_j:
      new_dist = (distance_matrix[i, c_i] + distance_matrix[i, c_j])/2
      distance_matrix[i, c_i] = new_dist
      distance_matrix[c_i, i] = new_dist

  #distance_matrix = np.delete(np.delete(distance_matrix, obj=c_j, axis=0), obj=c_j, axis=1)
  distance_matrix[c_j,] = math.inf
  distance_matrix[:,c_j] = math.inf
  #distance_matrix[c_i, c_i] = math.inf
  #print(distance_matrix, distance_matrix.shape)
  #print(history)
  counter -= 1

history = history.translate({ord('['): None})
history = history.translate({ord(']'): None})
history = history.translate({ord(','): None})
#print(t, counter)
print(history)

print(np.min(distance_matrix))
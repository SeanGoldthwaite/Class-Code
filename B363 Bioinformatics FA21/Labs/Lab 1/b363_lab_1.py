# -*- coding: utf-8 -*-
"""B363 Lab 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Y98Gv2tfS8Iu8maFXWAMFpqE1Mfey7Y

Problem
In DNA strings, symbols 'A' and 'T' are complements of each other, as are 'C' and 'G'.

The reverse complement of a DNA string s is the string sc formed by reversing the symbols of s, then taking the complement of each symbol (e.g., the reverse complement of "GTCA" is "TGAC").

Given: A DNA string s of length at most 1000 bp.

Return: The reverse complement sc of s.

Sample Dataset
AAAACCCGGT
Sample Output
ACCGGGTTTT
"""

dna_str = "ATAGGAGTTAGCTACGGCAGGTGCCTTTGGACCCTCCTCCCCGCCCCATGGAGTCAGGAAACGTCATATATCGCCGAATCTTGATCAATATGGGGGTAGGACGACGCACCCTACGCAGCGGCTTAAGACTGTAGAATCATCGATAATATCGTAAGCGTACGGTACAGACCTTGGTCAGTCCCTGTACACGGCGTTGTAAGGACACTGTAGTGTGTAGTCCGGTTAATACGATTAGATTCGTCAACAACTTATGGACGCAGCTACTACAACGCGCCGAGGGGAGCCTACCGCATGCCGACGGGTGGGGTCACAACAGTTCTCCGTCTTGTTTTGAACTACGCGAACAGTTCATTGTCGATCCAGTTGTTATCAGCCCGATAGCTCGCACCGGATGCGCAAACCGCCCCCGCCACGCCCATGCACGTCACCAGAACAGCAAGGGACGATCAATTAAAGACCCGCGCTAGCGAAATGCGTTGCGCTCTGGGCCTCGAGGGACATCTAATGCGATGGATTATAGAAAGTTCGTTACACGTTGACACAGGGGCTATCTTTTGAGTTTTATGCTTAGGCCCCTAACTGCAAGCACGAATCATACCAATTTTTCCTCTAATCTAAGCGATGTCATCGTTCCCATATGGTCCTGATGCACCACTACAATCAGGAGGCAAAGCTTCCCCCCGTATCTATTTCCGCAGCTCTTATTCCACCGGCGGTCGCACTAATCCCCGGCAAAGACTGCCTCTGAGTCGGATTAAGGGCAATGCGTCTCGCGCTCAGGGGTAGTCTCAACTCTGGATCAGAGGGACTGCCTAAGCCTCGCTAGATAGTGGAACGTCTACAGGAATAGATAGCCCACTCAATTCCAGTTACGGACTATGATCCTAATCACCGAGAATCCGAGGACCTCCACCTGCCAAGCTCTATACTGACTGGATGCTTAC"

dna_comp = dna_str.translate(dna_str.maketrans('ATCG', 'TAGC'))[::-1]

#print(dna_str)
print(dna_comp)

"""Problem
The GC-content of a DNA string is given by the percentage of symbols in the string that are 'C' or 'G'. For example, the GC-content of "AGCTATAG" is 37.5%. Note that the reverse complement of any DNA string has the same GC-content.

DNA strings must be labeled when they are consolidated into a database. A commonly used method of string labeling is called FASTA format. In this format, the string is introduced by a line that begins with '>', followed by some labeling information. Subsequent lines contain the string itself; the first line to begin with '>' indicates the label of the next string.

In Rosalind's implementation, a string in FASTA format will be labeled by the ID "Rosalind_xxxx", where "xxxx" denotes a four-digit code between 0000 and 9999.

Given: At most 10 DNA strings in FASTA format (of length at most 1 kbp each).

Return: The ID of the string having the highest GC-content, followed by the GC-content of that string. Rosalind allows for a default error of 0.001 in all decimal answers unless otherwise stated; please see the note on absolute error below.

Sample Dataset
>Rosalind_6404
CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC
TCCCACTAATAATTCTGAGG
>Rosalind_5959
CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT
ATATCCATTTGTCAGCAGACACGC
>Rosalind_0808
CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC
TGGGAACCTGCGGGCAGTAGGTGGAAT
"""

data = open('/content/rosalind_gc.txt', 'r').read()

import re
starts = [i.start() for i in re.finditer('>', data)]
starts.append(len(data))
cg_dict = {}

for i, item in enumerate(starts):
  try:
    label = data[item+1:item+14]
    dna = data[item+15: starts[i+1]]
    cg_count = '{:.6f}'.format(len(list(filter(lambda x: x == 'C' or x == 'G', dna))) / (len(dna) - 1) * 100)
    cg_dict[cg_count] = label
  except IndexError:
    break

vals = list(cg_dict.keys())
max_val = max(vals)
max_label = cg_dict[max_val]
print(max_label)
print(max_val)

print(cg_dict)